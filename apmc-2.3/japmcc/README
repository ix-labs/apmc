This is the Java APMC Compiler directory.

Compile : just type make.
  A java compiler should be in your path

Install : no installation is assumed or provided. You should run JAPMCC here

Run :
   java -cp classes JAPMCC --help should provide some help
   This application dumps an ad-hoc code  for verifying a given module and
    set of properties.
   You will need a deployment strategy to deploy this code on a cluster or
    a single computer. This version only includes a standalone sequential
    verifier.
   The standalone sequential verifier is implemented in the "endcode.h" file
    in this directory. See the example below.

Example :
  java -cp classes JAPMCC -m dice.pm -p dice.pctl -o dice.c x=3
   This produces the file dice.c, which results from the compilation of
   dice.pm and dice.pctl with initial value for unbound variable x to 3.
   If you do not specify the value of x, the program fails with a list of
   unbounded variables. Look at the pm and pctl codes to determine the
   meaning of these variables.
  To test your model, you must now compile this ad-hoc verifier into a
   program. For this, you will need to provide an "endcode.h" file adapted
   to your deployment scheme. The "endcode.h" file provided here includes
   a simple sequential deployment strategy suitable for testing.
  gcc -o dice -O3 dice.c
   ran in this directory should provide the dice program.
   dice (as any application generated by JAPMCC and compiled in this directory)
   uses 4 arguments: k, npath, time, and confidence, which has meaning only if
   you're testing the probability against a threshold.
  It runs the verification of dice.pm for the set of formulas expressed in
   dice.pctl on paths of length <k>, for <npaths>, displaying the status every
   <time> seconds.
  If you did not understand the previous sentence, maybe you need to read
   a paper on APMC. Or maybe I have to rewrite this sentence.

Note on PCTL formulas :
  Not all PCTL formulas are allowed: you cannot use nested probabilistic
   operator, nor steady-state operator.
  This version has a slight difference with what APMC used to do: threshold are
   not ignored anymore. It means that if you're testing if a probability is
   superior/inferior to a threshold, JAPMC will stop generating paths as soon
   as it can take a decision with the confidence you give as a parameter (10e-10
   is default), but will not excede npath paths.
